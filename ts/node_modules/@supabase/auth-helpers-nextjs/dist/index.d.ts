import * as _supabase_supabase_js from '@supabase/supabase-js';
import { SupabaseClient } from '@supabase/supabase-js';
export { Session, SupabaseClient, User } from '@supabase/supabase-js';
import * as _supabase_supabase_js_dist_module_lib_types from '@supabase/supabase-js/dist/module/lib/types';
import { CookieOptions, SupabaseClientOptionsWithoutAuth } from '@supabase/auth-helpers-shared';
import { GetServerSideProps, GetServerSidePropsContext, NextApiHandler, NextApiRequest, NextApiResponse } from 'next';
import { NextRequest, NextResponse } from 'next/server';
export { w as withMiddlewareAuth } from './withMiddlewareAuth-9d46fbd7.js';

declare type AddParameters<TFunction extends (...args: any) => any, TParameters extends [...args: any]> = (...args: [...Parameters<TFunction>, ...TParameters]) => ReturnType<TFunction>;

/**
 * @deprecated Use `createServerSupabaseClient` within `getServerSideProps` instead. See the [docs](https://github.com/supabase/auth-helpers/blob/main/packages/nextjs/MIGRATION_GUIDE.md#migrating-to-05x) for examples.
 */
declare function withPageAuth<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database, ResponseType extends Record<string, any> = any>({ authRequired, redirectTo, getServerSideProps, cookieOptions }?: {
    authRequired?: boolean;
    redirectTo?: string;
    getServerSideProps?: AddParameters<GetServerSideProps<ResponseType>, [
        SupabaseClient<Database, SchemaName>
    ]>;
    cookieOptions?: CookieOptions;
}): (context: GetServerSidePropsContext) => Promise<any>;

/**
 * @deprecated Use `createServerSupabaseClient` within your `NextApiHandler` instead. See the [docs](https://github.com/supabase/auth-helpers/blob/main/packages/nextjs/MIGRATION_GUIDE.md#migrating-to-05x) for examples.
 */
declare function withApiAuth<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database, ResponseType = any>(handler: AddParameters<NextApiHandler<ResponseType>, [
    SupabaseClient<Database, SchemaName>
]>, options?: {
    cookieOptions?: CookieOptions;
}): (req: NextApiRequest, res: NextApiResponse) => Promise<void>;

declare const logger: {
    log: (message?: any, ...optionalParams: any[]) => void;
    error: (message?: any, ...optionalParams: any[]) => void;
    info: (message?: any, ...optionalParams: any[]) => void;
    debug: (message?: any, ...optionalParams: any[]) => void;
    warn: (message?: any, ...optionalParams: any[]) => void;
};

declare function createBrowserSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>({ supabaseUrl, supabaseKey, options, cookieOptions }?: {
    supabaseUrl?: string;
    supabaseKey?: string;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createServerSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>(context: GetServerSidePropsContext | {
    req: NextApiRequest;
    res: NextApiResponse;
}, { supabaseUrl, supabaseKey, options, cookieOptions }?: {
    supabaseUrl?: string;
    supabaseKey?: string;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createMiddlewareSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>(context: {
    req: NextRequest;
    res: NextResponse;
}, { supabaseUrl, supabaseKey, options, cookieOptions }?: {
    supabaseUrl?: string;
    supabaseKey?: string;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createServerComponentSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>({ supabaseUrl, supabaseKey, headers, cookies, options, cookieOptions }: {
    supabaseUrl?: string;
    supabaseKey?: string;
    headers: () => any;
    cookies: () => any;
    options?: SupabaseClientOptionsWithoutAuth<SchemaName>;
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;

export { createBrowserSupabaseClient, createMiddlewareSupabaseClient, createServerComponentSupabaseClient, createServerSupabaseClient, logger, withApiAuth, withPageAuth };
